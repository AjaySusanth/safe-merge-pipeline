name: Secure PR merge with build check
on:
  pull_request: 
    branches: [main]
    types: [opened, synchronize, labeled, unlabeled, reopened]

jobs:
  check-label:
    runs-on: ubuntu-latest
    outputs:
      allow-merge: ${{steps.check-label.outputs.allow-merge}}
    steps:
      - name: Check for override label
        id: check-label
        run: |
          authorized_users=$(cat <<EOF
          "AjaySusanth"
          EOF
          )
          labeler="${{ github.event.sender.login}}"
          if echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q '"name": *"override"'; then
            if echo "$authorized_users" | grep -xq "$labeler"; then
              echo "allow-merge=true" >> $GITHUB_OUTPUT
            else
              echo "$labeler is not authorized to override"
              echo "allow-merge=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "allow-merge=false" >> $GITHUB_OUTPUT
          fi
  build-check:
    needs: check-label
    if: needs.check-label.outputs.allow-merge == 'false'
    runs-on: ubuntu-latest
    defaults:
            run:
                working-directory: demo-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install
      - name: Run build
        run: npm run build
  approve-merge:
    needs: [check-label, build-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check PR for merge
        run: |
          echo "Allow merge: ${{ needs.check-label.outputs.allow-merge }}"
          echo "Build check: ${{ needs.build-check.result || 'skipped' }}"
          if [[ "${{ needs.check-label.outputs.allow-merge }}" == "true" ]] || [[ "${{ needs.build-check.result || 'skipped' }}" == "success" ]]; then
            echo "PR approved for merge"
          else 
            echo "PR not approved for merge"
            exit 1
          fi
